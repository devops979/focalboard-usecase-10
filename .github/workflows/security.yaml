name: Terraform Security, Linting, and Validation
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      id-token: write

    env:
      TF_VERSION: "1.12.0"
      AWS_REGION: "us-east-1"

    steps:
      # ======================
      # SETUP & CREDENTIALS
      # ======================
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # ======================
      # STATIC ANALYSIS PHASE
      # ======================
      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          version: "v0.50.2"

      - name: Run TFLint
        run: tflint --init && tflint --format compact

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: sarif
          output_file_path: results.sarif
          soft_fail: true

      - name: Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      # ======================
      # TERRAFORM TEST PHASE
      # ======================
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Run Plan-phase Tests
        run: |
          # Only run tests marked with command=plan
          terraform test -filter=tests/demo.tftest.hcl -var="region=${{ env.AWS_REGION }}"

      - name: Generate Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
          echo "PLAN=$(cat plan.txt | base64 -w0)" >> $GITHUB_ENV

      - name: OPA Policy Check
        run: |
          terraform show -json tfplan > tfplan.json
          opa eval --format pretty \
            --data policies/security.rego \
            --input tfplan.json \
            "data.terraform.validation.deny"

      # ======================
      # DOCUMENTATION
      # ======================
      - name: Generate Documentation
        run: |
          terraform-docs markdown . > README.md
          git config --local user.email "devops979@gmail.com"
          git config --local user.name "GitHub Actions"
          git add README.md
          git diff --cached --quiet || git commit -m "docs: Update Terraform documentation"
          git push

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "${{ env.PLAN }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            ## Terraform Validation Results
            ### Static Analysis
            - ✅ TFLint completed
            - ✅ Checkov security scan completed
            
            ### Execution Plan
            <details>
            <summary>Show Plan (Base64 encoded)</summary>
            
            \`\`\`hcl
            ${Buffer.from(process.env.PLAN, 'base64').toString('utf8')}
            \`\`\`
            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
