name: validate the infrastructure code with security and linting tools
on:
  pull_request:
    branches:
      - main
jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      actions: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact

      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          soft_fail: true

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Upload SARIF file via GitHub API
        if: success() || failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
           if [ -f "results.sarif" ]; then
             echo "Uploading SARIF file using GitHub REST API..."
             SARIF_CONTENT=$(base64 -w 0 results.sarif)
             PAYLOAD=$(jq -n \
               --arg commit_sha "$GITHUB_SHA" \
               --arg ref "refs/pull/${{ github.event.pull_request.number || 'main' }}/merge" \
               --arg sarif "$SARIF_CONTENT" \
               --arg tool_name "Checkov" \
               '{commit_sha: $commit_sha, ref: $ref, sarif: $sarif, tool_name: $tool_name}')
             curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               --data "$PAYLOAD" \
               "https://api.github.com/repos/${GITHUB_REPOSITORY}/code-scanning/sarifs"
           else
             echo "No SARIF file found. Skipping upload."
           fi

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.12.0"

      - name: Check Terraform Formatting
        run: terraform fmt -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Convert Plan to JSON
        run: terraform show -json tfplan > tfplan.json

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate Terraform with OPA
        run: |
          opa eval --format pretty \
            --data policies/security.rego \
            --input tfplan.json \
            "data.terraform.validation.deny"

      - name: Terraform Plan (for PR comment)
        id: plan
        run: |
          terraform plan -no-color > plan.txt 2> debug.log
          cat plan.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Inject Terraform Plan into README.md
        run: |
          echo -e "\n## Terraform Plan Output\n" >> README.md
          cat plan.txt >> README.md

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        run: |
          curl -sSLo terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate README using terraform-docs
        run: |
          git config --local user.email "devops979@gmail.com"
          git config --local user.name "devops979"
          terraform-docs markdown . > README.md
          git add README.md
          git diff --cached --quiet || git commit -m "docs(terraform): Update README via terraform-docs"
          git push

      - name: Comment PR with Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUBTOKEN }}
          script: |
            const plan = process.env.PLAN || "No plan output available.";
            const output = [
              "#### Terraform Plan ðŸ“„",
              "",
              "<details><summary>Show Plan</summary>",
              "",
              "```hcl",
              plan,
              "```",
              "</details>",
              "",
              `*Triggered by: @${{ github.actor }}*`
            ].join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
