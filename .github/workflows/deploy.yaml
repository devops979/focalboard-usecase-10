name: Terraform Infra Provisioning using Ec2

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the Terraform action'
        required: true
        default: 'apply'  # Default action is apply
        type: choice
        options:
          - apply
          - destroy
permissions:
  contents: write
  id-token: write
 
jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      actions: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        working-directory: ./

      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          soft_fail: true
    
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh
    
      - name: Upload SARIF file via GitHub API
        if: success() || failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          if [ -f "results.sarif" ]; then
            echo "Uploading SARIF file using GitHub REST API..."
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              --data @- \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/code-scanning/sarifs" <<EOF
          {
            "commit_sha": "${GITHUB_SHA}",
            "ref": "refs/pull/${{ github.event.pull_request.number }}/merge",
            "sarif": "$(base64 -w 0 results.sarif)",
            "tool_name": "Checkov"
          }
          EOF
          else
            echo "No SARIF file found. Skipping upload."
          fi
    
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: us-east-1
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.12.0"
    
      - name: Check Terraform Formatting
        run: terraform fmt -recursive

    
      - name: Terraform Init
        run: terraform init
    
      - name: Terraform Validate
        run: terraform validate -no-color
    
      - name: Terraform Plan
        run: terraform plan -out=tfplan
    
      - name: Convert Plan to JSON
        run: terraform show -json tfplan > tfplan.json
    
      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
    
      - name: Validate Terraform with OPA
        working-directory: ./
        run: |
          opa eval --format pretty \
            --data policies/security.rego \
            --input tfplan.json \
            "data.terraform.validation.deny"
    
      # - name: Terraform Test
      #   run: terraform test || true
    
      - name: Terraform Plan
        id: plan
        timeout-minutes: 10
        continue-on-error: true
        shell: bash
        env:
          TF_IN_AUTOMATION: "true"
          TF_LOG: "DEBUG"
        run: |
          terraform plan  -no-color > plan.txt 2> debug.log
          cat plan.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
    
      - name: Inject Terraform Plan into README.md
        run: |
          echo -e "\n## Terraform Plan Output\n" >> $GITHUB_WORKSPACE/README.md
          cat plan.txt >> $GITHUB_WORKSPACE/README.md
    
      - name: Setup Node.js
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '18'
    
      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          sudo mv terraform-docs /usr/local/bin/
    
      - name: Generate-directory
        if: github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          git config --local user.email "devops979@gmail.com"
          git config --local user.name "devops979"
          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git remote set-url origin https://${{ github.actor }}:${GITHUBTOKEN}@github.com/${{ github.repository }}
          terraform-docs markdown . > README.md.new
          mv README.md.new README.md
          if [ -f README.md ]; then
            git add README.md
            git diff --cached --quiet && echo "No changes to commit" || git commit -m "docs(terraform): Update README.md via terraform-docs"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "README.md was not generated."
          fi 
    
      - name: Update Pull Request with Terraform Plan
        uses: actions/github-script@v7
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUBTOKEN }}
          script: |
            const plan = process.env.PLAN || "No plan output available.";
            const output = [
              "#### Terraform Format and Style ",
              "#### Terraform Initialization ",
              "#### Terraform Validation ",
              "#### Terraform Plan ðŸ“„",
              "",
              "<details><summary>Show Plan</summary>",
              "",
              "```hcl",
              plan,
              "```",
              "",
              "</details>",
              "",
              `*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`
            ].join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform_apply_destroy:
    runs-on: ubuntu-latest
    needs: lint-and-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125325699:role/Demo_Access
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.12.0"

      - name: Initialize Terraform
        run: terraform init
      
      - name: Validate Terraform
        run: terraform validate
        working-directory: ./
      
      - name: Generate Terraform Plan
        run: terraform plan
        working-directory: ./
      
      - name: Perform Action
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          else
            echo "Invalid action selected."
            exit 1
          fi
